#!/usr/bin/env python3
"""
‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏Ñ‡∏ä (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó)
- ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå HTML ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô cars.json
- ‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏Ñ‡∏ä‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
- ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏¢‡∏∞
- ‡∏£‡∏∞‡∏ö‡∏ö Auto Cleanup
"""
import os
import json
import shutil
import tempfile
import glob
from pathlib import Path
from auto_cleanup_utils import auto_cleanup, with_auto_cleanup

def load_cars_data():
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏à‡∏≤‡∏Å cars.json"""
    try:
        with open('cars.json', 'r', encoding='utf-8') as f:
            cars = json.load(f)
        return cars
    except FileNotFoundError:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå cars.json")
        return []

def get_valid_handles():
    """‡∏î‡∏∂‡∏á handle ‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å cars.json"""
    cars = load_cars_data()
    valid_handles = set()
    
    for car in cars:
        handle = car.get('handle', '')
        if handle:
            valid_handles.add(f"{handle}.html")
    
    return valid_handles

def cleanup_html_files():
    """‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå HTML ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô cars.json"""
    car_detail_dir = Path('docs/car-detail')
    if not car_detail_dir.exists():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå docs/car-detail")
        return
    
    valid_handles = get_valid_handles()
    print(f"üìã ‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô cars.json: {len(valid_handles)} ‡∏Ñ‡∏±‡∏ô")
    
    # ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå HTML ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    html_files = list(car_detail_dir.glob('*.html'))
    print(f"üìÅ ‡πÑ‡∏ü‡∏•‡πå HTML ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(html_files)} ‡πÑ‡∏ü‡∏•‡πå")
    
    deleted_files = []
    for html_file in html_files:
        if html_file.name not in valid_handles:
            try:
                html_file.unlink()  # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå
                deleted_files.append(html_file.name)
                print(f"üóëÔ∏è ‡∏•‡∏ö: {html_file.name}")
            except Exception as e:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö {html_file.name}: {e}")
    
    print(f"\n‚úÖ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: {len(deleted_files)} ‡πÑ‡∏ü‡∏•‡πå")
    return deleted_files

def clear_python_cache():
    """‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏Ñ‡∏ä Python"""
    print("\nüßπ ‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏Ñ‡∏ä Python...")
    
    # ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå __pycache__
    for pycache_dir in glob.glob('**/__pycache__', recursive=True):
        try:
            shutil.rmtree(pycache_dir)
            print(f"üóëÔ∏è ‡∏•‡∏ö __pycache__: {pycache_dir}")
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö {pycache_dir}: {e}")
    
    # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå .pyc
    for pyc_file in glob.glob('**/*.pyc', recursive=True):
        try:
            os.remove(pyc_file)
            print(f"üóëÔ∏è ‡∏•‡∏ö .pyc: {pyc_file}")
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö {pyc_file}: {e}")

def clear_temp_files():
    """‡∏•‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß"""
    print("\nüßπ ‡∏•‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß...")
    
    temp_patterns = [
        '**/*.tmp',
        '**/*.temp',
        '**/*~',
        '**/Thumbs.db',
        '**/.DS_Store',
        '**/desktop.ini'
    ]
    
    for pattern in temp_patterns:
        for temp_file in glob.glob(pattern, recursive=True):
            try:
                os.remove(temp_file)
                print(f"üóëÔ∏è ‡∏•‡∏ö temp: {temp_file}")
            except Exception as e:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö {temp_file}: {e}")

def clear_vscode_cache():
    """‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏Ñ‡∏ä VS Code (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ)"""
    print("\nüßπ ‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏Ñ‡∏ä VS Code...")
    
    vscode_dirs = [
        '.vscode/.ropeproject',
        '.vscode/settings.json.backup',
        'node_modules/.cache',
        '.next/cache',
        '.cache'
    ]
    
    for vscode_dir in vscode_dirs:
        if os.path.exists(vscode_dir):
            try:
                if os.path.isfile(vscode_dir):
                    os.remove(vscode_dir)
                else:
                    shutil.rmtree(vscode_dir)
                print(f"üóëÔ∏è ‡∏•‡∏ö VS Code cache: {vscode_dir}")
            except Exception as e:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö {vscode_dir}: {e}")

def force_file_deletion(filepath):
    """‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡πá‡∏≠‡∏Ñ"""
    try:
        # ‡∏•‡∏≠‡∏á‡∏•‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥‡∏Å‡πà‡∏≠‡∏ô
        if os.path.exists(filepath):
            os.remove(filepath)
            return True
    except:
        pass
    
    try:
        # ‡πÉ‡∏ä‡πâ Path.unlink() ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Å‡∏ß‡πà‡∏≤
        Path(filepath).unlink(missing_ok=True)
        return True
    except:
        pass
    
    return False

@with_auto_cleanup
def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å - ‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏ö‡∏ö Auto Cleanup"""
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î (‡∏û‡∏£‡πâ‡∏≠‡∏° Auto Cleanup)...")
    print("=" * 50)
    
    # 1. ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå HTML ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    deleted_files = cleanup_html_files()
    
    # 2. ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ï‡∏¥‡∏î‡πÅ‡∏Ñ‡∏ä
    problem_files = [
        'docs/car-detail/bmw-320d-2019.html'
    ]
    
    for file_path in problem_files:
        if force_file_deletion(file_path):
            print(f"üí™ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏•‡∏ö: {file_path}")
    
    # 3. ‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏Ñ‡∏ä‡∏ï‡πà‡∏≤‡∏á‡πÜ
    clear_python_cache()
    clear_temp_files()
    clear_vscode_cache()
    
    # 4. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
    print("\n" + "=" * 50)
    print("‚úÖ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    car_detail_dir = Path('docs/car-detail')
    if car_detail_dir.exists():
        remaining_html = len(list(car_detail_dir.glob('*.html')))
        valid_cars = len(get_valid_handles())
        print(f"üìä ‡πÑ‡∏ü‡∏•‡πå HTML ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {remaining_html}")
        print(f"üìä ‡∏£‡∏ñ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {valid_cars}")
        
        if remaining_html == valid_cars:
            print("üéâ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß!")
        else:
            print(f"‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°: {remaining_html - valid_cars} ‡πÑ‡∏ü‡∏•‡πå")
    
    print("\nüí° ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ô VS Code:")
    print("   1. ‡∏Å‡∏î Ctrl+Shift+P")
    print("   2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 'Developer: Reload Window'")
    print("   3. ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏±‡∏ô auto_cleanup.bat")

if __name__ == "__main__":
    main()
