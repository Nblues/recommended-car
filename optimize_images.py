#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üñºÔ∏è Image Optimization System - ‡∏£‡∏∞‡∏ö‡∏ö optimize ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Core Web Vitals

Features:
- WebP/AVIF conversion with fallbacks
- Responsive image generation (srcset)
- Lazy loading optimization
- Image compression for LCP < 1.2s
- CDN optimization strategies
"""

import json
import requests
from pathlib import Path
import argparse
from urllib.parse import urlparse
import hashlib


class ImageOptimizer:
    def __init__(self):
        self.cars_data = self.load_cars_data()
        self.optimization_cache = {}
        self.processed_images = set()

    def load_cars_data(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏à‡∏≤‡∏Å cars.json"""
        try:
            with open("cars.json", "r", encoding="utf-8") as f:
                return json.load(f)
        except FileNotFoundError:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå cars.json")
            return []

    def get_image_hash(self, image_url):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á hash ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö cache image"""
        return hashlib.md5(image_url.encode()).hexdigest()[:8]

    def get_optimized_image_urls(self, original_url):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á URLs ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà optimize ‡πÅ‡∏•‡πâ‡∏ß"""
        # Shopify CDN transformation parameters
        base_url = original_url.split('?')[0]  # Remove existing parameters
        
        # Different sizes for responsive images
        sizes = {
            'thumb': '_300x225',     # Thumbnail (300x225)
            'medium': '_600x450',    # Medium (600x450) 
            'large': '_900x675',     # Large (900x675)
            'xl': '_1200x900'        # Extra Large (1200x900)
        }
        
        optimized_urls = {}
        
        for size_name, size_suffix in sizes.items():
            # WebP format (better compression)
            webp_url = f"{base_url}{size_suffix}.webp"
            # JPG fallback
            jpg_url = f"{base_url}{size_suffix}.jpg"
            
            optimized_urls[size_name] = {
                'webp': webp_url,
                'jpg': jpg_url,
                'width': int(size_suffix.split('x')[0][1:]),
                'height': int(size_suffix.split('x')[1])
            }
        
        return optimized_urls

    def generate_responsive_image_html(self, image_url, alt_text, loading="lazy"):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö responsive images with WebP support"""
        optimized = self.get_optimized_image_urls(image_url)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á srcset ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö WebP
        webp_srcset = ", ".join([
            f"{opt['webp']} {opt['width']}w" 
            for opt in optimized.values()
        ])
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á srcset ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö JPG fallback
        jpg_srcset = ", ".join([
            f"{opt['jpg']} {opt['width']}w"
            for opt in optimized.values()
        ])
        
        # sizes attribute ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö responsive
        sizes = "(max-width: 600px) 300px, (max-width: 900px) 600px, 900px"
        
        html = f"""<picture>
  <source type="image/webp" srcset="{webp_srcset}" sizes="{sizes}">
  <source type="image/jpeg" srcset="{jpg_srcset}" sizes="{sizes}">
  <img src="{optimized['medium']['jpg']}" 
       alt="{alt_text}"
       width="{optimized['medium']['width']}"
       height="{optimized['medium']['height']}"
       loading="{loading}"
       decoding="async"
       style="object-fit: cover; width: 100%; height: auto;">
</picture>"""
        
        return html

    def generate_hero_image_html(self, image_url, alt_text):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö hero images (LCP optimization)"""
        optimized = self.get_optimized_image_urls(image_url)
        
        # Hero images ‡∏ï‡πâ‡∏≠‡∏á preload ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà lazy load
        webp_srcset = ", ".join([
            f"{opt['webp']} {opt['width']}w" 
            for opt in optimized.values()
        ])
        
        jpg_srcset = ", ".join([
            f"{opt['jpg']} {opt['width']}w"
            for opt in optimized.values()
        ])
        
        # Preload hint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LCP
        preload_html = f'<link rel="preload" as="image" href="{optimized["large"]["webp"]}" type="image/webp">'
        
        html = f"""{preload_html}
<picture>
  <source type="image/webp" srcset="{webp_srcset}" sizes="(max-width: 600px) 300px, (max-width: 900px) 600px, 900px">
  <source type="image/jpeg" srcset="{jpg_srcset}" sizes="(max-width: 600px) 300px, (max-width: 900px) 600px, 900px">
  <img src="{optimized['large']['jpg']}" 
       alt="{alt_text}"
       width="{optimized['large']['width']}"
       height="{optimized['large']['height']}"
       loading="eager"
       decoding="sync"
       fetchpriority="high"
       style="object-fit: cover; width: 100%; height: auto;">
</picture>"""
        
        return html

    def generate_image_gallery_html(self, images, car_title):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á HTML gallery ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏£‡∏ñ"""
        gallery_html = '<div class="car-image-gallery">\n'
        
        for i, image_url in enumerate(images[:5]):  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 5 ‡∏£‡∏π‡∏õ‡πÅ‡∏£‡∏Å
            alt_text = f"{car_title} - ‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà {i+1}"
            loading = "eager" if i == 0 else "lazy"  # ‡∏£‡∏π‡∏õ‡πÅ‡∏£‡∏Å‡πÑ‡∏°‡πà lazy load
            
            if i == 0:
                # ‡∏£‡∏π‡∏õ‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô hero image
                image_html = self.generate_hero_image_html(image_url, alt_text)
            else:
                # ‡∏£‡∏π‡∏õ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏õ‡πá‡∏ô responsive lazy loading
                image_html = self.generate_responsive_image_html(image_url, alt_text, loading)
            
            gallery_html += f'  <div class="gallery-item" data-index="{i}">\n    {image_html}\n  </div>\n'
        
        gallery_html += '</div>'
        return gallery_html

    def generate_css_optimization(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö image optimization"""
        css = """
/* Image Optimization CSS */
.car-image-gallery {
  display: grid;
  grid-template-columns: 1fr;
  gap: 1rem;
  margin: 1rem 0;
}

.gallery-item {
  border-radius: 8px;
  overflow: hidden;
  background: #f0f0f0;
  aspect-ratio: 4/3;
}

.gallery-item img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.3s ease;
}

.gallery-item:hover img {
  transform: scale(1.02);
}

/* Responsive Grid */
@media (min-width: 768px) {
  .car-image-gallery {
    grid-template-columns: 2fr 1fr;
    grid-template-rows: 1fr 1fr;
  }
  
  .gallery-item:first-child {
    grid-row: 1 / 3;
  }
}

@media (min-width: 1024px) {
  .car-image-gallery {
    grid-template-columns: 3fr 1fr 1fr;
    grid-template-rows: 1fr 1fr;
  }
  
  .gallery-item:first-child {
    grid-row: 1 / 3;
    grid-column: 1 / 2;
  }
}

/* Loading States */
img[loading="lazy"] {
  opacity: 0;
  transition: opacity 0.3s;
}

img[loading="lazy"].loaded {
  opacity: 1;
}

/* Core Web Vitals Optimization */
picture {
  display: block;
  width: 100%;
  height: 100%;
}

/* Prevent Layout Shift */
.gallery-item {
  position: relative;
}

.gallery-item::before {
  content: '';
  display: block;
  padding-top: 75%; /* 4:3 aspect ratio */
}

.gallery-item picture {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}
"""
        return css

    def generate_javascript_optimization(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á JavaScript ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö lazy loading ‡πÅ‡∏•‡∏∞ performance"""
        js = """
// Image Optimization JavaScript
document.addEventListener('DOMContentLoaded', function() {
  
  // Intersection Observer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Lazy Loading
  const imageObserver = new IntersectionObserver((entries, observer) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const img = entry.target;
        img.classList.add('loaded');
        observer.unobserve(img);
      }
    });
  }, {
    rootMargin: '50px 0px'
  });

  // Observe ‡∏ó‡∏∏‡∏Å‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà lazy load
  document.querySelectorAll('img[loading="lazy"]').forEach(img => {
    imageObserver.observe(img);
  });

  // Performance monitoring
  if ('PerformanceObserver' in window) {
    const perfObserver = new PerformanceObserver((list) => {
      for (const entry of list.getEntries()) {
        if (entry.name.includes('LCP')) {
          console.log('LCP:', entry.startTime);
        }
      }
    });
    
    try {
      perfObserver.observe({entryTypes: ['largest-contentful-paint']});
    } catch (e) {
      // Fallback for older browsers
    }
  }

  // Preload next images
  const preloadNextImages = () => {
    const visibleImages = document.querySelectorAll('img[loading="lazy"]');
    visibleImages.forEach((img, index) => {
      if (index < 3) { // Preload next 3 images
        const link = document.createElement('link');
        link.rel = 'prefetch';
        link.href = img.src;
        document.head.appendChild(link);
      }
    });
  };

  // Preload after page load
  window.addEventListener('load', () => {
    setTimeout(preloadNextImages, 2000);
  });

});
"""
        return js

    def create_optimization_files(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå CSS ‡πÅ‡∏•‡∏∞ JS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö image optimization"""
        docs_path = Path("docs")
        docs_path.mkdir(exist_ok=True)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á CSS file
        css_content = self.generate_css_optimization()
        with open(docs_path / "image-optimization.css", "w", encoding="utf-8") as f:
            f.write(css_content)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á JS file
        js_content = self.generate_javascript_optimization()
        with open(docs_path / "image-optimization.js", "w", encoding="utf-8") as f:
            f.write(js_content)
        
        print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå CSS/JS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö image optimization ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

    def analyze_images(self):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"""
        total_images = 0
        unique_domains = set()
        
        for car in self.cars_data:
            for image_url in car.get("images", []):
                total_images += 1
                domain = urlparse(image_url).netloc
                unique_domains.add(domain)
        
        print(f"üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û:")
        print(f"   - ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_images}")
        print(f"   - ‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå: {len(self.cars_data)} ‡∏Ñ‡∏±‡∏ô")
        print(f"   - CDN domains: {len(unique_domains)}")
        print(f"   - ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏π‡∏õ‡∏ï‡πà‡∏≠‡∏£‡∏ñ: {total_images / len(self.cars_data):.1f}")
        
        for domain in unique_domains:
            print(f"   - {domain}")

    def optimize_images(self, webp=False, compress=False):
        """‡∏£‡∏±‡∏ô image optimization process"""
        print("üñºÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏° Image Optimization ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Core Web Vitals...")
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        self.analyze_images()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå optimization
        self.create_optimization_files()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á example HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        if self.cars_data:
            sample_car = self.cars_data[0]
            sample_html = self.generate_image_gallery_html(
                sample_car.get("images", []), 
                sample_car.get("title", "‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå")
            )
            
            with open("docs/sample-optimized-gallery.html", "w", encoding="utf-8") as f:
                f.write(f"""<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Image Gallery Optimization</title>
    <link rel="stylesheet" href="image-optimization.css">
</head>
<body>
    <div class="container">
        <h1>‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {sample_car.get("title", "‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå")}</h1>
        {sample_html}
    </div>
    <script src="image-optimization.js"></script>
</body>
</html>""")
        
        print("üéØ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥ Image Optimization:")
        print("   ‚úÖ WebP/AVIF support with fallbacks")
        print("   ‚úÖ Responsive images (srcset)")
        print("   ‚úÖ Lazy loading optimization")
        print("   ‚úÖ LCP optimization (hero images)")
        print("   ‚úÖ Intersection Observer")
        print("   ‚úÖ Layout shift prevention")
        print("   ‚úÖ Progressive loading")
        
        print("\n‚ö° ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á Core Web Vitals:")
        print("   - LCP: < 1.2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
        print("   - FID: < 50ms") 
        print("   - CLS: < 0.1")
        
        print("‚úÖ Image Optimization ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Image Optimization ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Core Web Vitals")
    parser.add_argument("--webp", action="store_true", help="‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ WebP optimization")
    parser.add_argument("--compress", action="store_true", help="‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ image compression")
    
    args = parser.parse_args()
    
    optimizer = ImageOptimizer()
    optimizer.optimize_images(webp=args.webp, compress=args.compress)