#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üì° RSS Feed Generator - ‡∏™‡∏£‡πâ‡∏≤‡∏á RSS Feed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Google News ‡πÅ‡∏•‡∏∞ SEO

Features:
- RSS 2.0 compliant feed
- Google News optimization
- Car listings as news items
- SEO optimized descriptions
"""

import json
import xml.etree.ElementTree as ET
from datetime import datetime, timezone
from pathlib import Path
import html


class RSSFeedGenerator:
    def __init__(self):
        self.cars_data = self.load_cars_data()
        self.base_url = "https://nblues.github.io/recommended-car"
        self.site_info = {
            "title": "‡∏Ñ‡∏£‡∏π‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏ñ‡∏™‡∏ß‡∏¢ - ‡∏£‡∏ñ‡∏°‡∏∑‡∏≠‡∏™‡∏≠‡∏á‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà",
            "description": "‡∏£‡∏ñ‡∏°‡∏∑‡∏≠‡∏™‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô ‡∏ü‡∏£‡∏µ‡∏î‡∏≤‡∏ß‡∏ô‡πå ‡∏™‡πà‡∏á‡∏ü‡∏£‡∏µ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏ó‡∏¢",
            "language": "th-TH",
            "webmaster": "webmaster@kn-goodcar.com",
            "category": "Used Cars"
        }

    def load_cars_data(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏à‡∏≤‡∏Å cars.json"""
        try:
            with open("cars.json", "r", encoding="utf-8") as f:
                return json.load(f)
        except FileNotFoundError:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå cars.json")
            return []

    def create_rss_feed(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á RSS Feed"""
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á RSS content as string to avoid namespace issues
        now = datetime.now(timezone.utc)
        rss_content = f"""<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" 
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>{self.site_info["title"]}</title>
    <link>{self.base_url}</link>
    <description>{self.site_info["description"]}</description>
    <language>{self.site_info["language"]}</language>
    <webMaster>{self.site_info["webmaster"]}</webMaster>
    <category>{self.site_info["category"]}</category>
    <generator>KN-GoodCar Advanced RSS Generator v2.0</generator>
    <docs>https://www.rssboard.org/rss-specification</docs>
    <ttl>60</ttl>
    <lastBuildDate>{now.strftime("%a, %d %b %Y %H:%M:%S %z")}</lastBuildDate>
    <pubDate>{now.strftime("%a, %d %b %Y %H:%M:%S %z")}</pubDate>
    <atom:link href="{self.base_url}/feed.xml" rel="self" type="application/rss+xml"/>
"""
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° items
        for i, car in enumerate(self.cars_data[:10]):
            pub_date = datetime.now(timezone.utc)
            pub_date = pub_date.replace(hour=max(0, pub_date.hour - i))
            
            title = f"‡∏£‡∏ñ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤: {car['title']}"
            car_link = f"{self.base_url}/car-detail/{car['handle']}.html"
            description = self.create_car_description(car)
            
            rss_content += f"""
    <item>
      <title>{html.escape(title)}</title>
      <link>{car_link}</link>
      <guid>{car_link}</guid>
      <description>{html.escape(description)}</description>
      <category>‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå{car['title'].split()[0] if car['title'].split() else ''}</category>
      <dc:creator>‡∏Ñ‡∏£‡∏π‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏ñ‡∏™‡∏ß‡∏¢</dc:creator>
      <pubDate>{pub_date.strftime("%a, %d %b %Y %H:%M:%S %z")}</pubDate>"""
      
            if car["images"]:
                rss_content += f"""
      <enclosure url="{car['images'][0]}" type="image/jpeg" length="0"/>"""
                
            rss_content += """
    </item>"""
        
        rss_content += """
  </channel>
</rss>"""
        
        return rss_content

    def create_car_item(self, channel, car, index):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á RSS item ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏ñ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏±‡∏ô"""
        item = ET.SubElement(channel, "item")
        
        # Title
        title = f"‡∏£‡∏ñ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤: {car['title']}"
        ET.SubElement(item, "title").text = title
        
        # Link
        car_link = f"{self.base_url}/car-detail/{car['handle']}.html"
        ET.SubElement(item, "link").text = car_link
        ET.SubElement(item, "guid").text = car_link
        
        # Description
        description = self.create_car_description(car)
        ET.SubElement(item, "description").text = html.escape(description)
        
        # Content (HTML)
        content = self.create_car_content(car)
        content_elem = ET.SubElement(item, "{http://purl.org/rss/1.0/modules/content/}encoded")
        content_elem.text = f"<![CDATA[{content}]]>"
        
        # Category
        ET.SubElement(item, "category").text = f"‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå{car['title'].split()[0] if car['title'].split() else ''}"
        
        # Author
        ET.SubElement(item, "{http://purl.org/dc/elements/1.1/}creator").text = "‡∏Ñ‡∏£‡∏π‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏ñ‡∏™‡∏ß‡∏¢"
        
        # Publication date (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏•‡∏ö‡∏î‡πâ‡∏ß‡∏¢ index ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô)
        pub_date = datetime.now(timezone.utc)
        pub_date = pub_date.replace(hour=pub_date.hour - index)
        ET.SubElement(item, "pubDate").text = pub_date.strftime("%a, %d %b %Y %H:%M:%S %z")

        # Enclosure (‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û)
        if car["images"]:
            enclosure = ET.SubElement(item, "enclosure")
            enclosure.set("url", car["images"][0])
            enclosure.set("type", "image/jpeg")
            enclosure.set("length", "0")

    def create_car_description(self, car):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á description ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RSS"""
        # ‡πÅ‡∏¢‡∏Å‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠
        title_parts = car["title"].split()
        brand = title_parts[0] if title_parts else ""
        
        description = f"""
üöó {car['title']}
üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: ‡∏ø{car['price']:,.0f}
üè¢ ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠: {brand}
üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà
‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢

üéØ ‡∏û‡∏¥‡πÄ‡∏®‡∏©:
‚Ä¢ ‡∏ü‡∏£‡∏µ‡∏î‡∏≤‡∏ß‡∏ô‡πå 100%
‚Ä¢ ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô 1 ‡∏õ‡∏µ
‚Ä¢ ‡∏™‡πà‡∏á‡∏ü‡∏£‡∏µ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏ó‡∏¢
‚Ä¢ ‡∏ú‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 3,000/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô

üìû ‡∏™‡∏ô‡πÉ‡∏à‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠: ‡∏Ñ‡∏£‡∏π‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏ñ‡∏™‡∏ß‡∏¢
üåê ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: {self.base_url}/car-detail/{car['handle']}.html

{car['desc'][:200]}...
""".strip()
        
        return description

    def create_car_content(self, car):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á HTML content ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RSS"""
        main_image = car["images"][0] if car["images"] else ""
        
        content = f"""
<div style="font-family: 'Prompt', sans-serif; max-width: 600px; margin: 0 auto;">
  <h2 style="color: #f47b20; margin: 0 0 1rem;">{car['title']}</h2>
  
  {f'<img src="{main_image}" alt="{car["title"]}" style="width: 100%; max-width: 500px; border-radius: 8px; margin: 1rem 0;">' if main_image else ''}
  
  <div style="background: #f8f9fa; padding: 1.5rem; border-radius: 8px; margin: 1rem 0;">
    <h3 style="color: #2c3e50; margin: 0 0 1rem;">üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå</h3>
    <table style="width: 100%; border-collapse: collapse;">
      <tr>
        <td style="padding: 0.5rem; font-weight: bold; color: #7f8c8d;">‡∏£‡∏≤‡∏Ñ‡∏≤:</td>
        <td style="padding: 0.5rem; color: #e74c3c; font-weight: bold; font-size: 1.2em;">‡∏ø{car['price']:,.0f}</td>
      </tr>
      <tr style="background: #fff;">
        <td style="padding: 0.5rem; font-weight: bold; color: #7f8c8d;">‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠:</td>
        <td style="padding: 0.5rem;">{car['title'].split()[0] if car['title'].split() else '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</td>
      </tr>
      <tr>
        <td style="padding: 0.5rem; font-weight: bold; color: #7f8c8d;">‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà:</td>
        <td style="padding: 0.5rem;">‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà, ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢</td>
      </tr>
      <tr style="background: #fff;">
        <td style="padding: 0.5rem; font-weight: bold; color: #7f8c8d;">‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô:</td>
        <td style="padding: 0.5rem;">1 ‡∏õ‡∏µ‡πÄ‡∏ï‡πá‡∏°</td>
      </tr>
    </table>
  </div>
  
  <div style="background: linear-gradient(135deg, #f47b20, #e66a16); color: white; padding: 1.5rem; border-radius: 8px; margin: 1rem 0; text-align: center;">
    <h3 style="margin: 0 0 1rem;">üéØ ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏¥‡πÄ‡∏®‡∏©</h3>
    <ul style="list-style: none; padding: 0; margin: 0;">
      <li style="margin: 0.5rem 0;">üÜì ‡∏ü‡∏£‡∏µ‡∏î‡∏≤‡∏ß‡∏ô‡πå 100%</li>
      <li style="margin: 0.5rem 0;">üõ°Ô∏è ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô 1 ‡∏õ‡∏µ</li>
      <li style="margin: 0.5rem 0;">üöö ‡∏™‡πà‡∏á‡∏ü‡∏£‡∏µ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏ó‡∏¢</li>
      <li style="margin: 0.5rem 0;">üí∞ ‡∏ú‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 3,000/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</li>
    </ul>
  </div>
  
  <div style="margin: 1.5rem 0;">
    <h3 style="color: #2c3e50;">üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</h3>
    <p style="line-height: 1.6; color: #555;">{html.escape(car['desc'][:500])}...</p>
  </div>
  
  <div style="text-align: center; margin: 2rem 0;">
    <a href="{car['link']}" 
       style="background: #f47b20; color: white; padding: 1rem 2rem; text-decoration: none; border-radius: 8px; font-weight: bold; display: inline-block;">
      üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°
    </a>
  </div>
  
  <hr style="border: none; border-top: 1px solid #eee; margin: 2rem 0;">
  
  <div style="text-align: center; color: #7f8c8d; font-size: 0.9em;">
    <p>‡∏Ñ‡∏£‡∏π‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏ñ‡∏™‡∏ß‡∏¢ - ‡∏£‡∏ñ‡∏°‡∏∑‡∏≠‡∏™‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà</p>
    <p>üìß ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠: info@kn-goodcar.com | üìû ‡πÇ‡∏ó‡∏£: xxx-xxx-xxxx</p>
    <p>üåê ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå: <a href="{self.base_url}" style="color: #f47b20;">{self.base_url}</a></p>
  </div>
</div>
"""
        return content

    def generate_feed(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å RSS feed"""
        print("üì° ‡∏™‡∏£‡πâ‡∏≤‡∏á RSS Feed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Google News...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á RSS content
        rss_content = self.create_rss_feed()
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
        docs_path = Path("docs")
        docs_path.mkdir(exist_ok=True)
        
        feed_path = docs_path / "feed.xml"
        with open(feed_path, "w", encoding="utf-8") as f:
            f.write(rss_content)
        
        print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á RSS Feed ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        print(f"üìä Items: {min(len(self.cars_data), 10)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        print(f"üîó URL: {self.base_url}/feed.xml")
        print(f"üéØ Google News: Ready")
        print(f"üìÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")


def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå"""
    generator = RSSFeedGenerator()
    generator.generate_feed()


if __name__ == "__main__":
    main()