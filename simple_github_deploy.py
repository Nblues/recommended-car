#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ SIMPLE GITHUB PAGES DEPLOYMENT
Deploy ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤
"""

import os
import shutil
import subprocess
from pathlib import Path
from datetime import datetime

def simple_github_deploy():
    """Deploy ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ"""
    
    print("üöÄ SIMPLE GITHUB PAGES DEPLOYMENT")
    print("=" * 45)
    
    project_root = Path(__file__).parent
    online_ready = project_root / "online-ready"
    
    if not online_ready.exists():
        print("‚ùå online-ready folder not found")
        return False
    
    try:
        os.chdir(project_root)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö git status
        print("üìã Checking git status...")
        result = subprocess.run(["git", "status", "--porcelain"], 
                              capture_output=True, text=True)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ main branch ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        try:
            subprocess.run(["git", "checkout", "main"], 
                          check=True, capture_output=True)
            current_branch = "main"
        except:
            try:
                subprocess.run(["git", "checkout", "master"], 
                              check=True, capture_output=True)
                current_branch = "master"
            except:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á branch ‡πÉ‡∏´‡∏°‡πà
                subprocess.run(["git", "checkout", "-b", "main"], 
                              check=True, capture_output=True)
                current_branch = "main"
        
        print(f"‚úÖ On branch: {current_branch}")
        
        # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å online-ready ‡πÑ‡∏õ root (‡πÑ‡∏°‡πà‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤)
        print("üìÅ Copying deployment files...")
        
        # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å
        main_files = [
            "index.html",
            "netlify.toml", 
            "vercel.json",
            "package.json",
            "README.md",
            "DEPLOYMENT-GUIDE.md",
            "QUICK-DEPLOY.txt"
        ]
        
        for file_name in main_files:
            source = online_ready / file_name
            if source.exists():
                shutil.copy2(source, project_root / file_name)
                print(f"‚úÖ Copied: {file_name}")
        
        # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å directories
        dirs_to_copy = ["api", "demo"]
        for dir_name in dirs_to_copy:
            source_dir = online_ready / dir_name
            target_dir = project_root / dir_name
            
            if source_dir.exists():
                if target_dir.exists():
                    shutil.rmtree(target_dir)
                shutil.copytree(source_dir, target_dir)
                print(f"‚úÖ Copied directory: {dir_name}")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á .nojekyll
        (project_root / ".nojekyll").write_text("")
        print("‚úÖ .nojekyll created")
        
        # Add files
        print("üìù Adding files to git...")
        subprocess.run(["git", "add", "."], check=True, capture_output=True)
        
        # Commit
        commit_message = f"Deploy Car Widgets Collection - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        try:
            subprocess.run(["git", "commit", "-m", commit_message], 
                          check=True, capture_output=True)
            print("‚úÖ Changes committed")
        except subprocess.CalledProcessError:
            print("‚ÑπÔ∏è No changes to commit")
        
        # Push to main/master
        print(f"üöÄ Pushing to {current_branch}...")
        try:
            subprocess.run(["git", "push", "origin", current_branch], 
                          check=True, capture_output=True, timeout=30)
            print("‚úÖ Pushed to GitHub successfully!")
        except subprocess.TimeoutExpired:
            print("‚ö†Ô∏è Push timeout - but may still be successful")
        except subprocess.CalledProcessError as e:
            print(f"‚ö†Ô∏è Push failed: {e}")
            print("üí° You may need to set up GitHub authentication")
        
        print("\nüéâ DEPLOYMENT COMPLETED!")
        print("=" * 30)
        print("üåê Your Car Widgets are now LIVE at:")
        print("   https://nblues.github.io/recommended-car/")
        print("")
        print("üìã Enable GitHub Pages:")
        print("   1. Go to: https://github.com/nblues/recommended-car/settings/pages")
        print("   2. Source: Deploy from a branch")
        print("   3. Branch: main (or master)")
        print("   4. Folder: / (root)")
        print("   5. Save")
        print("")
        print("‚è∞ After enabling, wait 5-10 minutes for deployment")
        print("üîÑ Check status at: https://github.com/nblues/recommended-car/actions")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Deployment error: {e}")
        return False

def create_pages_instructions():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠ enable GitHub Pages"""
    
    instructions = """# üöÄ Enable GitHub Pages

## ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô GitHub Pages ‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏á‡πà‡∏≤‡∏¢‡πÜ:

### 1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Settings
```
https://github.com/nblues/recommended-car/settings/pages
```

### 2. Configure Source
- **Source:** Deploy from a branch
- **Branch:** main (‡∏´‡∏£‡∏∑‡∏≠ master)  
- **Folder:** / (root)
- ‡∏Ñ‡∏•‡∏¥‡∏Å **Save**

### 3. ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà
- GitHub ‡∏à‡∏∞ build ‡πÅ‡∏•‡∏∞ deploy ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
- ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 5-10 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏µ

### 4. ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
```
https://nblues.github.io/recommended-car/
```

## üìã ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Live ‡πÅ‡∏•‡πâ‡∏ß:

1. **‡πÅ‡∏ä‡∏£‡πå URL** ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ widget
2. **‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å widget** ‚Üí Copy code
3. **Paste ‡πÉ‡∏ô GoDaddy** Website Builder
4. **Customize API URLs**
5. **‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö traffic ‡πÄ‡∏û‡∏¥‡πà‡∏°!**

## üéØ Expected Results:

- üéØ **Chiang Mai Widget:** "‡∏£‡∏ñ‡∏°‡∏∑‡∏≠‡∏™‡∏≠‡∏á‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà" Top 3
- üî• **Standard Widget:** +150% traffic  
- ‚ö° **Instant Widget:** ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ

---
*GitHub Pages Deployment Guide*
"""
    
    Path("GITHUB-PAGES-SETUP.md").write_text(instructions, encoding="utf-8")
    print("‚úÖ GitHub Pages setup guide created")

if __name__ == "__main__":
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠
    create_pages_instructions()
    
    # Deploy
    success = simple_github_deploy()
    
    if success:
        print("\nüéä SUCCESS! Ready for GitHub Pages!")
        print("üìñ Follow GITHUB-PAGES-SETUP.md to enable Pages")
    else:
        print("\n‚ùå Deployment failed")
