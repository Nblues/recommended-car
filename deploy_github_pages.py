#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ GITHUB PAGES DEPLOYMENT
Deploy Car Widgets ‡∏Ç‡∏∂‡πâ‡∏ô GitHub Pages ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
"""

import os
import shutil
import subprocess
from pathlib import Path
from datetime import datetime

def deploy_to_github_pages():
    """Deploy ‡∏Ç‡∏∂‡πâ‡∏ô GitHub Pages"""
    
    print("üöÄ DEPLOYING TO GITHUB PAGES")
    print("=" * 40)
    
    project_root = Path(__file__).parent
    online_ready = project_root / "online-ready"
    
    if not online_ready.exists():
        print("‚ùå online-ready folder not found")
        return False
    
    try:
        # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á project directory
        os.chdir(project_root)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ git repository ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not (project_root / ".git").exists():
            print("üì¶ Initializing git repository...")
            subprocess.run(["git", "init"], check=True, capture_output=True)
            print("‚úÖ Git repository initialized")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á gh-pages branch
        print("üåø Creating gh-pages branch...")
        try:
            # ‡∏•‡∏ö gh-pages branch ‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            subprocess.run(["git", "branch", "-D", "gh-pages"], capture_output=True)
        except:
            pass
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á gh-pages branch ‡πÉ‡∏´‡∏°‡πà
        subprocess.run(["git", "checkout", "-b", "gh-pages"], check=True, capture_output=True)
        print("‚úÖ gh-pages branch created")
        
        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô .git ‡πÅ‡∏•‡∏∞ online-ready)
        print("üßπ Cleaning up old files...")
        for item in project_root.iterdir():
            if item.name not in [".git", "online-ready", ".gitignore"]:
                if item.is_dir():
                    shutil.rmtree(item)
                else:
                    item.unlink()
        
        # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å online-ready ‡πÑ‡∏õ‡∏¢‡∏±‡∏á root
        print("üìÅ Copying files from online-ready...")
        for item in online_ready.iterdir():
            if item.is_dir():
                shutil.copytree(item, project_root / item.name)
            else:
                shutil.copy2(item, project_root / item.name)
        print("‚úÖ Files copied")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á .nojekyll file ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î Jekyll processing
        (project_root / ".nojekyll").write_text("")
        print("‚úÖ .nojekyll created")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á CNAME file (optional - ‡πÅ‡∏Å‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
        # (project_root / "CNAME").write_text("your-domain.com")
        
        # Add ‡πÅ‡∏•‡∏∞ commit files
        print("üìù Adding files to git...")
        subprocess.run(["git", "add", "."], check=True, capture_output=True)
        
        commit_message = f"Deploy car widgets to GitHub Pages - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        subprocess.run(["git", "commit", "-m", commit_message], check=True, capture_output=True)
        print("‚úÖ Files committed")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö remote origin
        try:
            result = subprocess.run(["git", "remote", "get-url", "origin"], 
                                  capture_output=True, text=True, check=True)
            remote_url = result.stdout.strip()
            print(f"üì° Remote origin found: {remote_url}")
        except subprocess.CalledProcessError:
            print("‚ö†Ô∏è No remote origin found. Setting up...")
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ remote ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ repo ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            repo_name = "recommended-car"
            remote_url = f"https://github.com/nblues/{repo_name}.git"
            subprocess.run(["git", "remote", "add", "origin", remote_url], 
                          capture_output=True)
            print(f"‚úÖ Remote origin added: {remote_url}")
        
        # Push ‡πÑ‡∏õ GitHub
        print("üöÄ Pushing to GitHub Pages...")
        try:
            subprocess.run(["git", "push", "-f", "origin", "gh-pages"], 
                          check=True, capture_output=True, timeout=60)
            print("‚úÖ Successfully pushed to GitHub Pages!")
        except subprocess.TimeoutExpired:
            print("‚ö†Ô∏è Push timeout - but may still be successful")
        except subprocess.CalledProcessError as e:
            print(f"‚ö†Ô∏è Push failed: {e}")
            print("üí° You may need to:")
            print("   1. Set up GitHub authentication")
            print("   2. Push manually: git push -f origin gh-pages")
        
        # ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ main branch
        try:
            subprocess.run(["git", "checkout", "main"], capture_output=True)
        except:
            subprocess.run(["git", "checkout", "master"], capture_output=True)
        
        print("\nüéâ GITHUB PAGES DEPLOYMENT COMPLETED!")
        print("=" * 50)
        print("üåê Your widgets should be live at:")
        print("   https://nblues.github.io/recommended-car/")
        print("")
        print("üìã What users can do:")
        print("   1. Visit the URL above")
        print("   2. Choose their preferred widget")
        print("   3. Click 'Copy Widget' button")
        print("   4. Paste in their website")
        print("   5. Customize API URLs")
        print("   6. Start getting more traffic!")
        print("")
        print("‚è∞ GitHub Pages may take 5-10 minutes to update")
        print("üîÑ Check deployment status at:")
        print("   https://github.com/nblues/recommended-car/actions")
        
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Git command failed: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Deployment failed: {e}")
        return False

def create_github_pages_config():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á config ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GitHub Pages"""
    
    project_root = Path(__file__).parent
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á GitHub Actions workflow
    workflows_dir = project_root / ".github" / "workflows"
    workflows_dir.mkdir(parents=True, exist_ok=True)
    
    workflow_content = """name: Deploy Car Widgets to GitHub Pages

on:
  push:
    branches: [ gh-pages ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
"""
    
    (workflows_dir / "deploy.yml").write_text(workflow_content)
    print("‚úÖ GitHub Actions workflow created")

if __name__ == "__main__":
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á GitHub Pages config
    create_github_pages_config()
    
    # Deploy ‡πÑ‡∏õ GitHub Pages
    success = deploy_to_github_pages()
    
    if success:
        print("\nüéä SUCCESS! Car Widgets are now LIVE on GitHub Pages!")
        print("üîó Share this URL: https://nblues.github.io/recommended-car/")
    else:
        print("\n‚ùå Deployment failed. Please check the errors above.")
