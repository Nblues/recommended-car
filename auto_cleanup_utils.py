"""
Auto Cleanup Hook
‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå Python ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå
‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
"""
import os
import shutil
import subprocess
import sys
from pathlib import Path

def auto_cleanup():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
    print("\nüßπ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...")
    
    # ‡∏•‡∏ö‡πÅ‡∏Ñ‡∏ä Python
    cleanup_python_cache()
    
    # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    cleanup_temp_files()
    
    # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö garbage collection
    import gc
    gc.collect()
    
    print("‚úÖ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")

def cleanup_python_cache():
    """‡∏•‡∏ö‡πÅ‡∏Ñ‡∏ä Python"""
    try:
        # ‡∏•‡∏ö __pycache__ directories
        for root, dirs, files in os.walk('.'):
            for dirname in dirs:
                if dirname == '__pycache__':
                    cache_path = os.path.join(root, dirname)
                    shutil.rmtree(cache_path, ignore_errors=True)
                    print(f"üóëÔ∏è ‡∏•‡∏ö cache: {cache_path}")
        
        # ‡∏•‡∏ö .pyc files
        for root, dirs, files in os.walk('.'):
            for filename in files:
                if filename.endswith('.pyc'):
                    pyc_path = os.path.join(root, filename)
                    try:
                        os.remove(pyc_path)
                        print(f"üóëÔ∏è ‡∏•‡∏ö .pyc: {pyc_path}")
                    except:
                        pass
    except Exception as e:
        print(f"‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏Ñ‡∏ä Python ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: {e}")

def cleanup_temp_files():
    """‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß"""
    temp_patterns = ['*.tmp', '*.temp', '*~', 'Thumbs.db', '.DS_Store', 'desktop.ini']
    
    for pattern in temp_patterns:
        for temp_file in Path('.').rglob(pattern):
            try:
                temp_file.unlink()
                print(f"üóëÔ∏è ‡∏•‡∏ö temp: {temp_file}")
            except:
                pass

def force_vscode_refresh():
    """‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ VS Code ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ)"""
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå trigger ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å VS Code ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
        trigger_file = Path('.vscode_refresh_trigger')
        trigger_file.touch()
        trigger_file.unlink(missing_ok=True)
        print("üîÑ ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÑ‡∏õ‡∏¢‡∏±‡∏á VS Code")
    except:
        pass

# Decorator ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå
def with_auto_cleanup(func):
    """Decorator ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
    def wrapper(*args, **kwargs):
        try:
            result = func(*args, **kwargs)
            auto_cleanup()
            return result
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            auto_cleanup()  # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏°‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
            raise
    return wrapper

# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
if __name__ == "__main__":
    print("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Auto Cleanup...")
    auto_cleanup()
